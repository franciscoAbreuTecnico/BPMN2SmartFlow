@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sf: <http://example.org/ontologies/SmartFlow#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@base <http://example.org/mappings/> .

#################################################################
# Map FlowTemplate
#################################################################
<#FlowTemplateMapping>
  a rr:TriplesMap ;
  
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$" ;
  ] ;
  
  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/{flowTemplate.name}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:FlowTemplate ;
  ] ;
  
  rr:predicateObjectMap [
    rr:predicate sf:sfName ;
    rr:objectMap  [ rml:reference "$.flowTemplate.name" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titleEN ;
    rr:objectMap [
      rml:reference "$.flowTemplate.title.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titlePT ;
    rr:objectMap [
      rml:reference "$.flowTemplate.title.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:descriptionPT ;
    rr:objectMap [
      rml:reference "$.flowTemplate.description.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:descriptionEN ;
    rr:objectMap [
      rml:reference "$.flowTemplate.description.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:rawJson ;
    rr:objectMap [
      rml:reference "$.flowTemplate" ;
    ] ;
  ] .

#################################################################
# Map StartNode
#################################################################
<#StartNodeMapping>
  a rml:TriplesMap;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.flowTemplate.config.actionNodes[0]";
  ];

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/StartNode/start-node" ;
    rr:termType rr:IRI ;
    rr:class sf:StartNode ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rr:template "start-event" ;
      rr:termType rr:Literal ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ;
    rr:objectMap [
      rr:template "Start Event" ;
      rr:termType rr:Literal ;
    ];
  ] ;

    rr:predicateObjectMap [
    rr:predicate sf:has_queue ;
    rr:objectMap [
      rr:template   "http://example.org/ontologies/SmartFlow/Queue/{queue}" ;
      rr:termType   rr:IRI ;
    ] ;
  ] ;

  rr:predicateObjectMap [
      rr:predicate sf:has_action ;
      rr:objectMap [
        rr:template "http://example.org/ontologies/SmartFlow/Action/START-start-event" ;
        rr:termType rr:IRI ;
      ] ;
  ];
.

<#StartNodeActionMapping>
  a rml:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    # iterate once over the entire JSON (so we can pick out actionNodes[0]):
    rml:iterator          "$" ;
  ] ;

  rr:subjectMap [
    rr:template   "http://example.org/ontologies/SmartFlow/Action/START-start-event" ;
    rr:termType   rr:IRI ;
    rr:class      sf:Action ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rr:constant "START-start-event" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ;
    rr:objectMap [
      rr:constant "START" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:isPrimaryAction ;
    rr:objectMap [
      rr:datatype xsd:boolean ;
      rr:constant "true" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelPT ;
    rr:objectMap [
      rr:constant "Iniciar Processo" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelEN ;
    rr:objectMap [
      rr:constant "Start Process" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_transitionsTo ;
    rr:objectMap [
      # Here is the single rr:template that “grabs” actionNodes[0].id
      rr:template   "http://example.org/ontologies/SmartFlow/ActionNode/{.flowTemplate.config.actionNodes[0].id}" ;
      rr:termType   rr:IRI ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_queue ;
    rr:objectMap [
      rr:template   "http://example.org/ontologies/SmartFlow/Queue/{.flowTemplate.config.actionNodes[0].queue}" ;
      rr:termType   rr:IRI ;
    ] ;
  ] ;
.

#################################################################
# Map each ActionNode
#################################################################
<#ActionNodeMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.actionNodes[*]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/ActionNode/{id}" ;
    rr:termType rr:IRI ;
    rr:class sf:ActionNode ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rml:reference "id" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ;
    rr:objectMap [
      rml:reference "title.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titlePT ;
    rr:objectMap [
      rml:reference "title.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titleEN ;
    rr:objectMap [
      rml:reference "title.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:descriptionPT ;
    rr:objectMap [
      rml:reference "description.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:descriptionEN ;
    rr:objectMap [
      rml:reference "description.en-GB" ;
    ] ;
  ] ;
 
  rr:predicateObjectMap [
    rr:predicate sf:has_action ;
    rr:objectMap [
      rr:template "http://example.org/ontologies/SmartFlow/Action/{actions[*].id}" ;
      rr:termType rr:IRI ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_button ;
    rr:objectMap [
      rr:template    "http://example.org/ontologies/SmartFlow/Button/{buttons[*].id}" ;
      rr:termType    rr:IRI ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_actionProcessor ;
    rr:objectMap [
      rr:template    "http://example.org/ontologies/SmartFlow/ActionProcessor/{actionProcessor[*].id}" ;
      rr:termType    rr:IRI ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_queue ;
    rr:objectMap [
      rr:template   "http://example.org/ontologies/SmartFlow/Queue/{queue}" ;
      rr:termType   rr:IRI ;
    ] ;
  ] ;

  # rr:predicateObjectMap [
  #   rr:predicate sf:has_queue ;
  #   rr:objectMap [
  #     rr:parentTriplesMap <#QueueMapping> ;
  #     rr:joinCondition [
  #       rr:child  "queue" ;
  #       rr:parent "queue"
  #     ] ;
  #   ] ;
  # ] ;
.

<#GenericActionNodeMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    # filter so only type=="generic"
    rml:iterator          "$.flowTemplate.config.actionNodes[?(@.type=='generic')]" ;
  ] ;

  rr:subjectMap [
    rr:template   "http://example.org/ontologies/SmartFlow/ActionNode/{id}" ;
    rr:termType   rr:IRI ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate   rdf:type ;
    rr:objectMap   [ rr:constant sf:GenericActionNode ] ;
  ] ;
.
<#WithFormsActionNodeMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator          "$.flowTemplate.config.actionNodes[?(@.type=='withForms')]" ;
  ] ;

  rr:subjectMap [
    rr:template   "http://example.org/ontologies/SmartFlow/ActionNode/{id}" ;
    rr:termType   rr:IRI ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate   rdf:type ;
    rr:objectMap   [ rr:constant sf:WithFormsActionNode ] ;
  ] ;
.
<#WithButtonsActionNodeMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator          "$.flowTemplate.config.actionNodes[?(@.type=='withButtons')]" ;
  ] ;

  rr:subjectMap [
    rr:template   "http://example.org/ontologies/SmartFlow/ActionNode/{id}" ;
    rr:termType   rr:IRI ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate   rdf:type ;
    rr:objectMap   [ rr:constant sf:WithButtonsActionNode ] ;
  ] ;
.

#################################################################
# Map each TerminalNode (e.g. SUCCESS, FAILURE, CANCEL)
#################################################################
<#TerminalNodeMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.actionNodes[*].actions[?(@.to=='SUCCESS' || @.to=='FAILURE' || @.to=='CANCEL')]" ;
  ] ;

  rr:subjectMap [
    rr:template   "http://example.org/ontologies/SmartFlow/ActionNode/{to}" ;
    rr:termType   rr:IRI ;
    rr:class      sf:TerminalNode ;
  ] ;

  # rr:predicateObjectMap [
  #   rr:predicate   rdf:type ;
  #   rr:objectMap   [ rr:constant sf:TerminalNode ] ;
  # ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_queue ;
    rr:objectMap [
      rr:template   "http://example.org/ontologies/SmartFlow/Queue/{queue}" ;
      rr:termType   rr:IRI ;
    ] ;
  ] ;

  # rr:predicateObjectMap [
  #   rr:predicate sf:has_queue ;
  #   rr:objectMap [
  #     rr:parentTriplesMap <#QueueMapping> ;
  #     rr:joinCondition [
  #       rr:child  "queue" ;
  #       rr:parent "queue"
  #     ] ;
  #   ] ;
  # ] ;

  rr:predicateObjectMap [
    rr:predicate   sf:sfId ;
    rr:objectMap   [ rml:reference "to" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate   sf:sfName ;
    rr:objectMap [
      rr:template   "{to} State" ;
      rr:termType   rr:Literal ;
    ] ;
  ] ;
.


#################################################################
# Map each Action associated with an ActionNode
#################################################################
<#ActionsMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator          "$.flowTemplate.config.actionNodes[*].actions[*]" ;
  ] ;

  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/Action/{id}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:Action ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rml:reference "id" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ;
    rr:objectMap [
      rml:reference "name" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:isPrimaryAction ;
    rr:objectMap [
      rml:reference "primary" ;
      rr:datatype   xsd:boolean ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelPT ;
    rr:objectMap [
      rml:reference "label.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelEN ;
    rr:objectMap [
      rml:reference "label.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_transitionsTo ;
    rr:objectMap [
      rr:template    "http://example.org/ontologies/SmartFlow/ActionNode/{to}" ;
      rr:termType    rr:IRI ;
    ] ;
  ] ;
.


#################################################################
# Map each Button associated with an ActionNode
#################################################################
<#ButtonMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator          "$.flowTemplate.config.actionNodes[*].buttons[*]" ;
  ] ;

  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/Button/{id}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:Button ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rml:reference "id" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:isPrimaryButton ;
      rr:objectMap [
        rml:reference "primary" ;
        rr:datatype   xsd:boolean ;
      ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelPT ;
    rr:objectMap [
      rml:reference "label.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ; # labelEN
    rr:objectMap [
      rml:reference "label.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_handler ;
    rr:objectMap [
      rr:parentTriplesMap <#HandlerMapping> ;
      rr:joinCondition [ rr:child "id" ; rr:parent "id" ]
    ] ;
  ] ;
.

#################################################################
# Map each Handler associated with a Button
#################################################################
<#HandlerMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator          "$.flowTemplate.config.actionNodes[*].buttons[*]" ;
  ] ;
  
  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/Handler/{id}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:Handler ;
  ] ;

    rr:predicateObjectMap [
    rr:predicate sf:has_handlersAction ;
    rr:objectMap [
      rr:template "http://example.org/ontologies/SmartFlow/Action/{handlers.action}" ;
      rr:termType rr:IRI ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_associatedForm ;
    rr:objectMap [
      rr:template "http://example.org/ontologies/SmartFlow/Form/{handlers.form}" ;
      rr:termType rr:IRI ;
    ] ;
  ] ;
.

#################################################################
# Map each ActionProcessor associated with an ActionNode
#################################################################
<#ActionProcessorMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.actionNodes[*].actionProcessor[*]" ;
  ] ;

  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/ActionProcessor/{id}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:ActionProcessor ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rml:reference "id" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_applyOn ;
    rr:objectMap [
      rr:template "http://example.org/ontologies/SmartFlow/Action/{applyOn}" ;
      rr:termType rr:IRI ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ;
    rr:objectMap [
      rml:reference "flowProcessor" ;
    ] ;
  ] ;
.

#################################################################
# Map each Flow Form
#################################################################
<#FormMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*]" ;
  ] ;

  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/Form/{id}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:Form ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rml:reference "id" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titlePT ;
    rr:objectMap [
      rml:reference "title.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titleEN ;
    rr:objectMap [
      rml:reference "title.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_page ;
    rr:objectMap [
      rr:termType rr:IRI ;
      rr:template  "http://example.org/ontologies/SmartFlow/Page/{form.pages[*].title.en-GB}" ;
    ] ;
  ] ;
.

#################################################################
# Map each Form Page
#################################################################
<#PageMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*]" ;
  ] ;

  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/Page/{title.en-GB}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:Page ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titlePT ;
    rr:objectMap [
      rml:reference "title.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titleEN ;
    rr:objectMap [
      rml:reference "title.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_section ;
    rr:objectMap [
      rr:template  "http://example.org/ontologies/SmartFlow/Section/{sections[*].title.en-GB}" ;
    ];
  ] ;
.

#################################################################
# Map each Section associated with a Form Page
#################################################################
<#SectionMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source         "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator    "$.flowTemplate.config.forms[*].form.pages[*].sections[*]" ;
  ] ;

  rr:subjectMap [
    rr:template  "http://example.org/ontologies/SmartFlow/Section/{title.en-GB}" ;
    rr:termType  rr:IRI ;
    rr:class     sf:Section ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titlePT ;
    rr:objectMap [
      rml:reference "title.pt-PT" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titleEN ;
    rr:objectMap [
      rml:reference "title.en-GB" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_property ;
    rr:objectMap [
      rr:termType   rr:IRI ;
      rr:template   "http://example.org/ontologies/SmartFlow/Property/{properties[*].field}" ;
    ] ;
  ] ; 
.

#################################################################
# Map each Property
#################################################################
<#BooleanPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='Boolean')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:BooleanProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:titlePT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:titleEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required" ; rr:datatype   xsd:boolean ; ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:labelYesPT ; rr:objectMap [ rml:reference "labelYes.pt-PT" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:labelYesEN ; rr:objectMap [ rml:reference "labelYes.en-GB" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:labelNoPT ; rr:objectMap [ rml:reference "labelNo.pt-PT" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:labelNoEN ; rr:objectMap [ rml:reference "labelNo.en-GB" ] ;
  ] ;
.

<#FilePropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='File')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:FileProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;
  
  rr:predicateObjectMap [
    rr:predicate sf:titlePT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:titleEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required"; rr:datatype xsd:boolean ; ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:allowedFileType ; rr:objectMap [ rml:reference "allowedFileTypes[*]" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:maxSizeMB ; rr:objectMap [ rml:reference "maxSizeMB" ] ;
  ] ;
.

<#SelectPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='Select')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:SelectProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titlePT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:titleEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:multiple ; rr:objectMap [ rml:reference "multiple"; rr:datatype xsd:boolean ; ] ;
  ] ;

    rr:predicateObjectMap [
    rr:predicate sf:allowOther ; rr:objectMap [ rml:reference "allowOther"; rr:datatype xsd:boolean ; ] ;
  ] ;

    rr:predicateObjectMap [
    rr:predicate sf:collapseOther ; rr:objectMap [ rml:reference "collapseOther"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_option ;
    rr:objectMap [
      rr:template "http://example.org/ontologies/SmartFlow/Option/{options[*].value}" ;
      rr:termType rr:IRI ;
    ] ;
  ] ;
.

<#TextPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='Text')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:TextProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ;
  ] ;

  sf:predicateObjectMap [
    rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelPT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:multiline ; rr:objectMap [ rml:reference "multiline"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:inputType ; rr:objectMap [ rml:reference "inputType" ] ;
  ] ;
.

<#LocalizedTextPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='LocalizedText')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:LocalizedTextProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ;
  ] ;
  sf:predicateObjectMap [
    rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:labelPT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:labelEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required" ; rr:datatype xsd:boolean ; ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:multiline ; rr:objectMap [ rml:reference "multiline"; rr:datatype xsd:boolean ; ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:inputType ; rr:objectMap [ rml:reference "inputType" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:locales ; rr:objectMap [ rml:reference "locales[*]" ] ;
  ] ;
.

<#QuantityPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='Quantity')]" ;
  ] ;
  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:QuantityProperty ;
  ] ;
  rr:predicateObjectMap [ rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:titlePT ; rr:objectMap [ rml:reference "label.pt-PT" ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:titleEN ; rr:objectMap [ rml:reference "label.en-GB" ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required" ; rr:datatype xsd:boolean ; ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:minValue ; rr:objectMap [ rml:reference "min" ; rr:datatype xsd:decimal ; ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:maxValue ; rr:objectMap [ rml:reference "max" ; rr:datatype xsd:decimal ; ] ; ] ;
  rr:predicateObjectMap [ rr:predicate sf:stepValue ; rr:objectMap [ rml:reference "step" ; rr:datatype xsd:decimal ; ] ; ] ;
.

<#NumericPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='Numeric')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:NumericProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;
.

<#AsyncSelectPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='AsyncSelect')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:AsyncSelectProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelPT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:allowOther ; rr:objectMap [ rml:reference "allowOther"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:optionsProvider ; rr:objectMap [ rml:reference "optionsProvider"] ;
  ] ;
.

<#DateTimePropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='DateTime')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:DateTimeProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ; rr:objectMap [ rml:reference "field" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfName ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelPT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:isRequired ; rr:objectMap [ rml:reference "required"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:date ; rr:objectMap [ rml:reference "dateFormat"; rr:datatype xsd:boolean ; ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:time ; rr:objectMap [ rml:reference "timeFormat"; rr:datatype xsd:boolean ; ] ;
  ] ;
.

<#ArrayPropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='Array')]" ;
  ] ;
  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:ArrayProperty ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:propertyType ;
    rr:objectMap [ rml:reference "type" ] ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate sf:has_property ;
    rr:objectMap [
      rr:template "http://example.org/ontologies/SmartFlow/Property/{properties[*].field}" ;
      rr:termType rr:IRI ;
    ] ;
  ] ;
.

<#CompositePropertyMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[?(@.type=='Composite')]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Property/{field}" ;
    rr:termType rr:IRI ;
    rr:class sf:CompositeProperty ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:propertyType ; rr:objectMap [ rml:reference "type" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:has_property ;
    rr:objectMap [
      rr:template "http://example.org/ontologies/SmartFlow/Property/{properties[*].field}" ;
      rr:termType rr:IRI ;
    ] ;
  ] ;
.

<#PropertyOptionMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.flowTemplate.config.forms[*].form.pages[*].sections[*].properties[*].options[*]" ;
  ] ;

  rr:subjectMap [
    rr:template "http://example.org/ontologies/SmartFlow/Option/{value}" ;
    rr:termType rr:IRI ;
    rr:class sf:Option ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:value ; rr:objectMap [ rml:reference "value" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelPT ; rr:objectMap [ rml:reference "label.pt-PT" ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:labelEN ; rr:objectMap [ rml:reference "label.en-GB" ] ;
  ] ; 
.

#################################################################
# Map each Queue
#################################################################
<#QueueMapping>
  a rr:TriplesMap ;
  rml:logicalSource [
    rml:source            "{{JSON_SOURCE}}" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator          "$.flowTemplate.config.actionNodes[*]" ;
  ] ;

  rr:subjectMap [
    rr:template   "http://example.org/ontologies/SmartFlow/Queue/{queue}" ;
    rr:termType   rr:IRI ;
    rr:class      sf:Queue ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate sf:sfId ;
    rr:objectMap [
      rml:reference "queue" ;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate  sf:sfName ;
    rr:objectMap  [ rml:reference "queue" ] ;
  ] ;
.
